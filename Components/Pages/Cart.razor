@page "/cart"
@rendermode InteractiveServer
@using MaisonTelecom.Services
@using MaisonTelecom.Models
@inject StateContainer State
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="cart-page">
    <div class="cart-header">
        <h1>Your Cart</h1>
        <a href="/shop"><button class="continue-shopping">Continue Shopping</button></a>
    </div>

    <div class="cart-items">
        @if (State.Cart.Any())
        {
            @foreach (var item in State.Cart)
            {
                <div class="cart-item">
                    <img src="@(string.IsNullOrEmpty(item.Product.ImageURL1) ? "/Image/iphone.jpg" : item.Product.ImageURL1)" alt="@item.Product.Name" class="item-image" />
                    <div class="item-details">
                        <p class="item-brand">@item.Product.Brand</p>
                        <p class="item-name">@item.Product.Name</p>
                        <p class="item-specs">@item.Product.RAM RAM, @item.Product.ROM ROM</p>
                        <p class="item-price">FCFA @item.Product.Price.ToString("N0")</p>
                        <p class="item-state">State: New</p>
                    </div>
                    <div class="item-actions">
                        <div class="quantity-selector">
                            <button @onclick="() => State.DecreaseQuantity(item.Product.Id)">-</button>
                            <span>@item.Quantity</span>
                            <button @onclick="() => State.IncreaseQuantity(item.Product.Id)">+</button>
                        </div>
                        <a href="#" class="remove-link" @onclick="() => State.RemoveFromCart(item)" @onclick:preventDefault>Remove</a>
                    </div>
                    <div class="item-total-price">
                        <p>FCFA @((item.Product.Price * item.Quantity).ToString("N0"))</p>
                    </div>
                </div>
            }
        }
        else
        {
            <p>Your cart is empty.</p>
        }
    </div>

    <div class="cart-summary">
        <div class="subtotal">
            <p>Subtotal</p>
            <p>FCFA @Subtotal.ToString("N0")</p>
        </div>
        <button class="checkout-button" @onclick='() => NavigationManager.NavigateTo("/checkout-shipping")'>
            <i class="fas fa-lock"></i>
            Check Out
        </button>
    </div>
</div>

@code {
    private decimal Subtotal => State.Cart.Any() ? State.Cart.Sum(item => item.Product.Price * item.Quantity) : 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await State.InitializeAsync();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        State.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnStateChange -= StateHasChanged;
    }
}